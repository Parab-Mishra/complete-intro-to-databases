{
    "componentChunkName": "component---src-templates-lesson-template-js",
    "path": "/complex-neo4j-queries",
    "result": {"data":{"markdownRemark":{"html":"<p>This section assumes you've inserted all the people and movies from the previous section. If not, <a href=\"https://btholt.github.io/complete-intro-to-databases/sample-neo4j.cql\">run this query</a> to get all the data.</p>\n<p>Let's do some queries to familiarize ourselves with the data.</p>\n<div class=\"gatsby-highlight\" data-language=\"cql\"><pre class=\"language-cql\"><code class=\"language-cql\">MATCH (n) RETURN distinct labels(n), count(*);</code></pre></div>\n<p>This will query the database for all nodes (which is the <code class=\"language-text\">(n)</code> part, notice no label) and then it uses the builtin <code class=\"language-text\">labels()</code> function to get all the labels, and then counts those with <code class=\"language-text\">count(*)</code> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"cql\"><pre class=\"language-cql\"><code class=\"language-cql\">MATCH (n)-[r]-&gt;() RETURN type(r), count(*);</code></pre></div>\n<p>Similar to above, we are now counting how many relationships we have in a database.</p>\n<p>Okay, so let's pick an actor or actress and find out what other people they've been in movies with. I'll pick Keanu Reeves here.</p>\n<div class=\"gatsby-highlight\" data-language=\"cql\"><pre class=\"language-cql\"><code class=\"language-cql\">MATCH (Keanu:Person)-[:ACTED_IN]-&gt;(m:Movie)&lt;-[:ACTED_IN]-(Costar:Person)\nWHERE Keanu.name = &quot;Keanu Reeves&quot;\nRETURN DISTINCT Costar.name, count(*)\nORDER BY count(*) DESC, Costar.name;</code></pre></div>\n<ul>\n<li>We've seen similar queries before as far as the MATCH goes.</li>\n<li>Similar to above we're using a DISTINCT clause and then using <code class=\"language-text\">count(*)</code> to aggregate how many movies Keanu appeared in these movies with these people in.</li>\n<li>ORDER BY should look familiar as it works very similar to PostgreSQL. I gave it two fields to order by so it'll order first by quantity of films they're in together then alphabetical by name.</li>\n</ul>\n<p>If you're using the browser and you want to see a pretty graph, try this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cql\"><pre class=\"language-cql\"><code class=\"language-cql\">MATCH (Keanu:Person)-[:ACTED_IN]-&gt;(m:Movie)&lt;-[r:ACTED_IN]-(Costar:Person)\nWHERE Keanu.name = &quot;Keanu Reeves&quot;\nRETURN Costar, m, Keanu;</code></pre></div>\n<p>If you want the nice graphics you need to return whole nodes and not just fields.</p>\n<h2 id=\"degrees-of-kevin-bacon\" style=\"position:relative;\"><a href=\"#degrees-of-kevin-bacon\" aria-label=\"degrees of kevin bacon permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Degrees of Kevin Bacon</h2>\n<p>So the whole point of this dataset is to solve the <a href=\"https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon\">Six Degrees of Kevin Bacon</a> problem i.e. every actor and actress in Hollywood can be connected Kevin Bacon via them having acted in a film that acted in a film with him directly, with someone who was in a film with Kevin Bacon, or with someone who acted in a film with someone who was in a film with Kevin Bacon, and so-on-and-so-forth up to six degrees of separation.</p>\n<p>So let's see how you could solve that problem with our dataset. Let's see how close Keanu is. (run this in the browser)</p>\n<div class=\"gatsby-highlight\" data-language=\"cql\"><pre class=\"language-cql\"><code class=\"language-cql\">MATCH path = shortestPath(\n  (Bacon:Person {name:&quot;Kevin Bacon&quot;})-[*]-(Keanu:Person {name:&quot;Keanu Reeves&quot;})\n)\nRETURN path;</code></pre></div>\n<ul>\n<li><code class=\"language-text\">shortestPath</code> is a function that will find the shortest path between two nodes by looking at their relationships.</li>\n<li>The variable <code class=\"language-text\">path</code> ends up being a path type. It contains all the information for a whole path within your grasp.</li>\n<li>You can run this in cypher-shell but it'll give you a lot of data back.</li>\n</ul>\n<p>For something more friendly to see in cypher-shell, just look at the length</p>\n<div class=\"gatsby-highlight\" data-language=\"cql\"><pre class=\"language-cql\"><code class=\"language-cql\">MATCH path = shortestPath(\n  (Bacon:Person {name:&quot;Kevin Bacon&quot;})-[*]-(Keanu:Person {name:&quot;Keanu Reeves&quot;})\n)\nRETURN length(path);</code></pre></div>\n<p>To unwind this in a way that would be readable in cypher-shell with all the movies and actors/actresses you could do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"cql\"><pre class=\"language-cql\"><code class=\"language-cql\">MATCH path = shortestPath(\n    (First:Person {name:&quot;Kevin Bacon&quot;})-[*]-(Second:Person {name:&quot;Keanu Reeves&quot;})\n)\nUNWIND nodes(path) AS node\nRETURN coalesce(node.name, node.title) AS text;</code></pre></div>\n<ul>\n<li>UNWIND takes something not a list and makes it a list. With <code class=\"language-text\">nodes(path)</code> we're getting all the nodes out (which will be Persons and Movies)</li>\n<li><code class=\"language-text\">coalesce</code> is necessary because Persons have names and Movies have titles. This will take the first thing in there that's not null.</li>\n<li>We use AS here to make these things easier to refer to later (both <code class=\"language-text\">node</code> and <code class=\"language-text\">text</code>)</li>\n</ul>\n<h2 id=\"find-degrees-in-a-network\" style=\"position:relative;\"><a href=\"#find-degrees-in-a-network\" aria-label=\"find degrees in a network permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Find Degrees in a Network</h2>\n<p>You could imagine if this was a recommendation engine, you may want to recommend people other actors and actresses based on movies people have appeared in together. What if we wanted to take that two degrees out?</p>\n<div class=\"gatsby-highlight\" data-language=\"cql\"><pre class=\"language-cql\"><code class=\"language-cql\">MATCH (Halle:Person)-[:ACTED_IN*1..4]-(Recommendation:Person)\nWHERE Halle.name = &quot;Halle Berry&quot;\nRETURN DISTINCT Recommendation.name\nORDER BY Recommendation.name;</code></pre></div>\n<p>This will give you that extended network of people to check out. If you wanted to include diretory and writers in that count, just omit the <code class=\"language-text\">:ACTED_IN</code> so it's <code class=\"language-text\">-[*1..4]-</code> and that will give you any relationship.</p>","frontmatter":{"path":"/complex-neo4j-queries","title":"Complex Neo4j Queries","order":"4D","section":"Graph","description":"Graph databases are great when you need to define relations between objects that can have complex webs of relations especially for things like social networks."}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"2F","path":"/aggregation","title":"Aggregation"}}},{"node":{"frontmatter":{"order":"4D","path":"/complex-neo4j-queries","title":"Complex Neo4j Queries"}}},{"node":{"frontmatter":{"order":"3D","path":"/complex-sql-queries","title":"Complex SQL Queries"}}},{"node":{"frontmatter":{"order":"4A","path":"/graph-databases","title":"Graph Databases"}}},{"node":{"frontmatter":{"order":"3H","path":"/hasura","title":"Hasura"}}},{"node":{"frontmatter":{"order":"6A","path":"/conclusion","title":"Conclusion"}}},{"node":{"frontmatter":{"order":"2E","path":"/indexes-in-mongodb","title":"Indexes in MongoDB"}}},{"node":{"frontmatter":{"order":"1B","path":"/installation-notes","title":"Installation Notes"}}},{"node":{"frontmatter":{"order":"3A","path":"/intro-to-sql-databases","title":"Intro to SQL Database"}}},{"node":{"frontmatter":{"order":"1A","path":"/intro","title":"Introduction"}}},{"node":{"frontmatter":{"order":"3E","path":"/json-in-postgresql","title":"JSON in PostgreSQL"}}},{"node":{"frontmatter":{"order":"2H","path":"/mongodb-ops","title":"MongoDB Ops"}}},{"node":{"frontmatter":{"order":"5A","path":"/key-value-store","title":"Key-Value Store"}}},{"node":{"frontmatter":{"order":"2B","path":"/mongodb","title":"MongoDB"}}},{"node":{"frontmatter":{"order":"5E","path":"/more-redis-concepts","title":"More Redis Concepts"}}},{"node":{"frontmatter":{"order":"4C","path":"/neo4j-browser","title":"Neo4j Browser"}}},{"node":{"frontmatter":{"order":"4E","path":"/neo4j-indexes","title":"Indexes in Neo4j"}}},{"node":{"frontmatter":{"order":"4G","path":"/neo4j-ops","title":"Neo4j Ops"}}},{"node":{"frontmatter":{"order":"4B","path":"/neo4j","title":"Neo4j"}}},{"node":{"frontmatter":{"order":"4F","path":"/nodejs-app-with-neo4j","title":"Node.js App with Neo4j"}}},{"node":{"frontmatter":{"order":"3G","path":"/nodejs-app-with-postgresql","title":"Node.js App with PostgreSQL"}}},{"node":{"frontmatter":{"order":"5F","path":"/nodejs-app-with-redis","title":"Node.js App with Redis"}}},{"node":{"frontmatter":{"order":"2G","path":"/nodejs-app-with-mongodb","title":"Write a Node.js app with MongoDB"}}},{"node":{"frontmatter":{"order":"2A","path":"/nosql","title":"NoSQL"}}},{"node":{"frontmatter":{"order":"3F","path":"/postgresql-indexes","title":"Indexes in PostgreSQL"}}},{"node":{"frontmatter":{"order":"3I","path":"/postgresql-ops","title":"PostgreSQL Ops"}}},{"node":{"frontmatter":{"order":"3B","path":"/postgresql","title":"PostgreSQL"}}},{"node":{"frontmatter":{"order":"2C","path":"/querying-mongodb","title":"Querying MongoDB"}}},{"node":{"frontmatter":{"order":"3C","path":"/querying-postgresql","title":"Querying PostgreSQL"}}},{"node":{"frontmatter":{"order":"5C","path":"/redis-command-options","title":"Redis Command Options"}}},{"node":{"frontmatter":{"order":"5G","path":"/redis-ops","title":"Redis Ops"}}},{"node":{"frontmatter":{"order":"5D","path":"/redis-data-types","title":"Redis Data Types"}}},{"node":{"frontmatter":{"order":"5B","path":"/redis","title":"Redis"}}},{"node":{"frontmatter":{"order":"1C","path":"/terminology","title":"Terminology"}}},{"node":{"frontmatter":{"order":"2D","path":"/updating-mongodb","title":"Updating MongoDB"}}}]}},"pageContext":{}},
    "staticQueryHashes": ["2959687377"]}